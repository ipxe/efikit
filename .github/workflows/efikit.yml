name: Build

on: [push]

jobs:

  base:
    name: Linux GCC
    runs-on: ubuntu-20.04   # Required for usable autoconf-archive
    steps:
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y -o Acquire::Retries=50 \
            autoconf-archive valgrind lcov gettext libcmocka-dev libefivar-dev
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build
        run: |
          ./autogen.sh
          ./configure
          make
          make check
          make check-valgrind
      - name: Upload failure artifacts
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: base-failure
          path: |
            .
            !src/edk2
      - name: Distribution
        run: |
          make distcheck
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: efikit-*.tar.gz
          if-no-files-found: error
      - name: Coverage report
        run: |
          make clean
          ./configure --enable-code-coverage
          make check-code-coverage
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: base-coverage
          path: efikit-*-coverage.info

  clang:
    name: Clang
    needs: base
    runs-on: ubuntu-latest
    steps:
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y -o Acquire::Retries=50 \
            valgrind gettext libcmocka-dev libefivar-dev
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: dist
      - name: Unpack
        run: |
          tar --strip-components=1 -xvf efikit-*.tar.gz
      - name: Build
        run: |
          ./configure CC=clang
          make
          make check
          make check-valgrind
      - name: Upload failure artifacts
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: clang-failure
          path: .

  mingw:
    name: MinGW
    needs: base
    runs-on: ubuntu-latest
    container: fedora
    steps:
      - name: Install packages
        run: |
          dnf install -y make libtool gettext-devel \
            mingw64-gcc mingw64-win-iconv mingw64-glib2 mingw64-cmocka \
            wine-common wine-systemd
      - name: Configure environment
        run: |
          # Initialise ~/.wine directory
          mkdir ~/.wine
          wineboot -i
          wineserver -w
          # Patch ~/.wine/system.reg to include path to MinGW libraries
          MINGWPATH=$(winepath -w /usr/x86_64-w64-mingw32/sys-root/mingw/bin)
          QMINGWPATH=$(printf '%q' ${MINGWPATH})
          QQMINGWPATH=$(printf '%q' ${QMINGWPATH})
          sed -i "s/^\(\"PATH\"=.*\)\"$/\1;${QQMINGWPATH}\"/" \
            ~/.wine/system.reg
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: dist
      - name: Unpack
        run: |
          tar --strip-components=1 -xvf efikit-*.tar.gz
      - name: Build
        run: |
          ./configure --build= --host=x86_64-w64-mingw32
          make
          wine ./src/efidevpath.exe -h
      - name: Upload failure artifacts
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: mingw-failure
          path: .

  windows:
    name: Windows
    needs: base
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Install packages
        uses: msys2/setup-msys2@v2
        with:
          install: >
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-cmocka
            mingw-w64-x86_64-lcov
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: dist
      - name: Unpack
        run: |
          tar --strip-components=1 -xvf efikit-*.tar.gz
      - name: Build
        run: |
          ./configure
          make
          make check
      - name: Upload failure artifacts
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: windows-failure
          path: .
      - name: Binary distribution
        run: |
          make install DESTDIR=$(pwd)/instdir
          for exe in instdir/mingw64/bin/*.exe ; do
            for dll in $(ldd ${exe} | awk '/=>/{print $(NF-1)}' | \
                        grep -v /c/windows | grep -v instdir/mingw64/bin) ; do
              cp ${dll} instdir/mingw64/bin/
            done
          done
          strip instdir/mingw64/bin/*.{exe,dll}
      - name: Upload binaries
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: instdir/mingw64/bin
      - name: Coverage report
        run: |
          make clean
          ./configure --enable-code-coverage
          CWD=$(pwd)/
          DRIVE=${CWD:1:1}:
          DRIVE=${DRIVE^^}
          NONDRIVE=${CWD:2}
          WTF=${DRIVE}${NONDRIVE//\//\\n}
          WTFOPTS="--rc geninfo_adjust_src_path='${WTF} => ${CWD}'"
          echo "Hacking ${WTFOPTS}"
          make check-code-coverage \
                CODE_COVERAGE_LCOV_OPTIONS="${WTFOPTS}"
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: windows-coverage
          path: efikit-*-coverage.info

  macos:
    name: MacOS
    needs: base
    runs-on: macos-latest
    steps:
      - name: Install packages
        run: |
          brew install cmocka gettext glib pkg-config lcov
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: dist
      - name: Unpack
        run: |
          tar --strip-components=1 -xvf efikit-*.tar.gz
      - name: Build
        run: |
          ./configure
          make
          make check
      - name: Upload failure artifacts
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: macos-failure
          path: .
      - name: Coverage report
        run: |
          make clean
          ./configure --enable-code-coverage
          make check-code-coverage CODE_COVERAGE_LIBS=
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: macos-coverage
          path: efikit-*-coverage.info

  coverage:
    name: Coverage
    needs:
      - base
      - windows
      - macos
    runs-on: ubuntu-latest
    steps:
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y -o Acquire::Retries=50 lcov
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Merge reports
        run: |
          find . -name 'efikit-*-coverage.info' -exec echo -a {} \; | \
            xargs lcov --rc lcov_branch_coverage=1 -o efikit-coverage.info
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: efikit-coverage.info
